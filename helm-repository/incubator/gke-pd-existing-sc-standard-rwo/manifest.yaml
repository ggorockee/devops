---
# Source: gke-pd-existing-sc-standard-rwo/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysql
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: ZGJwYXNzd29yZDEx
---
# Source: gke-pd-existing-sc-standard-rwo/templates/user-mgmt-web-app_secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: usermgmt-webapp
type: Opaque
data:
  DB_HOSTNAME: bXlzcWw=
  DB_NAME: d2ViYXBwZGI=
  DB_PASSWORD: ZGJwYXNzd29yZDEx
  DB_PORT: MzMwNg==
  DB_USERNAME: cm9vdA==
---
# Source: gke-pd-existing-sc-standard-rwo/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: usermanagement-dbcreation-script
data:
  mysql_usermgmt.sql: |-
    DROP DATABASE IF EXISTS webappdb;
    CREATE DATABASE webappdb;
---
# Source: gke-pd-existing-sc-standard-rwo/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
  storageClassName: standard-rwo
---
# Source: gke-pd-existing-sc-standard-rwo/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  selector:
    app.kubernetes.io/name: gke-pd-existing-sc-standard-rwo
    app.kubernetes.io/instance: mysql
    app: mysql
  ports:
    - port: 3306
  clusterIP: None
---
# Source: gke-pd-existing-sc-standard-rwo/templates/user-mgmt-web-app_service.yaml
apiVersion: v1
kind: Service
metadata:
  name: usermgmt-webapp
  labels:
    app.kubernetes.io/name: usermgmt-webapp
    app.kubernetes.io/instance: usermgmt-webapp
    app: usermgmt-webapp
spec:
  type: LoadBalancer
  selector:
      app.kubernetes.io/name: usermgmt-webapp
      app.kubernetes.io/instance: usermgmt-webapp
      app: usermgmt-webapp
  ports:
    - port: 80
      targetPort: 8080
---
# Source: gke-pd-existing-sc-standard-rwo/templates/deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gke-pd-existing-sc-standard-rwo
      app.kubernetes.io/instance: mysql
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gke-pd-existing-sc-standard-rwo
        app.kubernetes.io/instance: mysql
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:8.0
          envFrom:
            - secretRef:
                name: mysql
          ports:
            - containerPort: 3306
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-persistent-storage
            - mountPath: /docker/entrypoint-initdb.d
              name: usermanagement-dbcreation-script
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
        - name: usermanagement-dbcreation-script
          configMap:
            name: usermanagement-dbcreation-script
---
# Source: gke-pd-existing-sc-standard-rwo/templates/user-mgmt-web-app_deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: usermgmt-webapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: usermgmt-webapp
      app.kubernetes.io/instance: usermgmt-webapp
      app: usermgmt-webapp
  template:
    metadata:
      labels:
        app.kubernetes.io/name: usermgmt-webapp
        app.kubernetes.io/instance: usermgmt-webapp
        app: usermgmt-webapp
    spec:
      initContainers:
        - name: init-db
          image: "busybox:1.31"
          command:
            - "sh"
            - "-c"
            - 'echo -e "Checking for the availability of MySQL Server deployment"; while ! nc -z mysql 3306; do sleep 1; printf "-"; done; echo -e "  >> MySQL DB Server has started";'
      containers:
        - name: usermgmt-webapp
          image: stacksimplify/kube-usermgmt-webapp:1.0.0-MySQLDB
          ports:
          - containerPort: 8080
          envFrom:
            - secretRef:
                name: usermgmt-webapp
